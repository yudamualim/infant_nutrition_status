[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "pearsonr",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "finders",
        "importPath": "django.contrib.staticfiles",
        "description": "django.contrib.staticfiles",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "napp",
        "description": "napp",
        "isExtraImport": true,
        "detail": "napp",
        "documentation": {}
    },
    {
        "label": "person_form",
        "importPath": "napp.views",
        "description": "napp.views",
        "isExtraImport": true,
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "napp.migrations.0001_initial",
        "description": "napp.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Person',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('NIK', models.CharField(max_length=16)),",
        "detail": "napp.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NappConfig",
        "kind": 6,
        "importPath": "napp.apps",
        "description": "napp.apps",
        "peekOfCode": "class NappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'napp'",
        "detail": "napp.apps",
        "documentation": {}
    },
    {
        "label": "PersonForm",
        "kind": 6,
        "importPath": "napp.forms",
        "description": "napp.forms",
        "peekOfCode": "class PersonForm(forms.ModelForm):\n    class Meta:\n        model = Person\n        fields = ['NIK', 'Nama', 'Berat_Badan', 'Tinggi_Badan', 'Usia_Saat_UKur', 'Jenis_Kelamin', 'Status_Gizi_Balita']\n        # Add widgets for better user experience\n        widgets = {\n            'NIK': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter NIK'}),\n            'Nama': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter Name'}),\n            'Berat_Badan': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Enter Weight'}),\n            'Tinggi_Badan': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Enter Height'}),",
        "detail": "napp.forms",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "napp.models",
        "description": "napp.models",
        "peekOfCode": "class Person(models.Model):\n  NIK = models.CharField(max_length=16)\n  Nama = models.CharField(max_length=50)\n  Berat_Badan = models.FloatField()\n  Tinggi_Badan = models.FloatField()\n  Usia_Saat_UKur = models.IntegerField()\n  Jenis_Kelamin = models.CharField(max_length=1)\n  Status_Gizi_Balita = models.CharField(max_length=20)",
        "detail": "napp.models",
        "documentation": {}
    },
    {
        "label": "data_test",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def data_test(request):\n  csv_path = finders.find('data/testings.csv')\n  df = pd.read_csv(csv_path, encoding='latin-1')\n  # Data Standardization\n  scaler = StandardScaler()\n  x = df[\n    ['Berat_Badan', 'Tinggi_Badan', 'Usia_Saat_Ukur', 'Jenis_Kelamin']\n  ]\n  x = scaler.fit_transform(x)\n  # Format data with two decimal places",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "data_train",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def data_train(request):\n  data_train = pd.read_csv(finders.find('data/trains.csv'))\n  data_testing = pd.read_csv(finders.find('data/testings.csv'))\n  x_train, y_train = data_train.iloc[:, :-1], data_train.iloc[:, -1]\n  x_test, y_test = data_testing.iloc[:, :-1], data_testing.iloc[:, -1]\n  context = {\n    'x_train': x_train,\n    'y_train': y_train,\n    'x_test': x_test,\n    'y_test': y_test",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "correlation",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def correlation(request):\n  df = pd.read_csv(finders.find('data/trains.csv'))\n  columns_to_correlate = ['Berat_Badan', 'Tinggi_Badan', 'Usia_Saat_Ukur', 'Jenis_Kelamin']\n  # Change object data type into binary\n  df = pd.get_dummies(df, columns=['Jenis_Kelamin'])\n  # Update the list of columns to correlate to include the new one-hot encoded columns\n  columns_to_correlate = ['Berat_Badan', 'Tinggi_Badan', 'Usia_Saat_Ukur',] + [col for col in df.columns if 'Jenis_Kelamin' in col]\n  correlations = []\n  for col1 in columns_to_correlate:\n    for col2 in columns_to_correlate:",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def predict(request):\n  df = pd.read_csv(finders.find('data/test.csv'))\n  # Features and target\n  x = df[\n    ['Berat_Badan', 'Tinggi_Badan', 'Usia_Saat_Ukur', 'Jenis_Kelamin'] # Fitur\n  ]\n  y = df['Status_Gizi_Balita'] # Target\n  feature_weight = np.array([\n    0.35,\n    0.39,",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def graph(request):\n  # Prediction data\n  tp = 18\n  tn = 5\n  fp = 3\n  fn = 4\n  accuracy = (tp + tn) / (tp + tn + fp + fn)\n  precision = tp / (tp + fp)\n  recall = tp / (tp + fn)\n  f1 = 2 * (precision * recall) / (precision + recall)",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "person_form",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def person_form(request):\n    if request.method == 'POST':\n        form = PersonForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('index_person')  # Replace 'success' with your desired redirect\n    else:\n        form = PersonForm()\n    return render(request, 'person_form.html', {'form': form})\ndef success_view(request):",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "success_view",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def success_view(request):\n    # Retrieve all records from the Person model\n    people = Person.objects.all()\n    return render(request, 'success.html', {'people': people})\ndef index_person(request):\n    people = Person.objects.all()\n    return render(request, 'index_person.html', {'people': people})\ndef edit_person(request, person_id):\n    person = get_object_or_404(Person, id=person_id)\n    if request.method == 'POST':",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "index_person",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def index_person(request):\n    people = Person.objects.all()\n    return render(request, 'index_person.html', {'people': people})\ndef edit_person(request, person_id):\n    person = get_object_or_404(Person, id=person_id)\n    if request.method == 'POST':\n        form = PersonForm(request.POST, instance=person)\n        if form.is_valid():\n            form.save()\n            return redirect('index_person')  # Redirect to index_person after saving",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "edit_person",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def edit_person(request, person_id):\n    person = get_object_or_404(Person, id=person_id)\n    if request.method == 'POST':\n        form = PersonForm(request.POST, instance=person)\n        if form.is_valid():\n            form.save()\n            return redirect('index_person')  # Redirect to index_person after saving\n    else:\n        form = PersonForm(instance=person)\n    return render(request, 'edit_person.html', {'form': form, 'person': person})",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "delete_person",
        "kind": 2,
        "importPath": "napp.views",
        "description": "napp.views",
        "peekOfCode": "def delete_person(request, person_id):\n    person = get_object_or_404(Person, id=person_id)\n    person.delete()\n    return redirect('index_person')  # Redirect to index_person after deletion",
        "detail": "napp.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "nutrition_app.asgi",
        "description": "nutrition_app.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "nutrition_app.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-3#ck_7l@d!0m_(7kt%p7jz4py!!fv8&)#ug+gji4l!oz74zqa2'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-3#ck_7l@d!0m_(7kt%p7jz4py!!fv8&)#ug+gji4l!oz74zqa2'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'napp',",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'napp',\n]\nMIDDLEWARE = [",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'nutrition_app.urls'",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "ROOT_URLCONF = 'nutrition_app.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "WSGI_APPLICATION = 'nutrition_app.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\n# Default primary key field type",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\nSTATIC_ROOT = BASE_DIR / \"staticfiles\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"staticfiles\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "nutrition_app.settings",
        "description": "nutrition_app.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "nutrition_app.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "nutrition_app.urls",
        "description": "nutrition_app.urls",
        "peekOfCode": "urlpatterns = [\n    # path('admin/', admin.site.urls),\n    path('', views.data_test),\n    path('data-test', views.data_test),\n    path('data-train', views.data_train),\n    path('correlation', views.correlation),\n    path('predict', views.predict),\n    path('graph', views.graph),\n    path('person-form', person_form, name='person_form'),\n    path('success/', views.success_view, name='success'),",
        "detail": "nutrition_app.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "nutrition_app.wsgi",
        "description": "nutrition_app.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "nutrition_app.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nutrition_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]